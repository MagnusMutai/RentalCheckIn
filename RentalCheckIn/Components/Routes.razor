<CascadingAuthenticationState>
    <Router AppAssembly="typeof(Program).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="routeData" DefaultLayout="typeof(Layout.MainLayout)">
                <Authorizing>
                    Please wait while you're being logged in...
                </Authorizing>
                <NotAuthorized>
                    Sorry, you're not allowed to see this.
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="routeData" Selector="h1" />
        </Found>
    </Router>
</CascadingAuthenticationState>

@code{

    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; }
    [Inject]
    private IAuthService AuthService { get; set; }
    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set;  }
    public bool isTokenRefreshed;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isTokenRefreshed)
        {
            // isTokenRefreshed = true;

            var response = await AuthService.RefreshTokenAsync();

            if (response.IsSuccess)
            {
                await LocalStorage.SetAsync("refreshToken", response.RefreshToken);
                await LocalStorage.SetAsync("token", response.AccessToken);
                Constants.JWTToken = response.AccessToken;
            }

            var result = await LocalStorage.GetAsync<string>("refreshToken");
            if (result.Success)
            {
                var storedRToken = result.Value;
            }
            await AuthStateProvider.GetAuthenticationStateAsync();

        }
    }

}