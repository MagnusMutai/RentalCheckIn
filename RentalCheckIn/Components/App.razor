<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="app.css" />
    <link rel="stylesheet" href="RentalCheckIn.styles.css" />
    <link rel="icon" type="image/png" href="favicon.png" />
    @* Instrument Sans google font *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Instrument+Sans:ital,wght@0,400..700;1,400..700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
    <HeadOutlet />
</head>

<body>
    <Routes />
    <script src="_framework/blazor.web.js"></script>
    @* <script src="~/js/webauthn.js"></script> *@

    <script>
        window.fido2 = {
            async register(options) {
                try {
                    // Decode challenge using Base64URL
                    options.challenge = base64urlToUint8Array(options.challenge);

                    // Decode user.id using Base64URL
                    options.user.id = base64urlToUint8Array(options.user.id);

                    // If there are excludeCredentials, decode their IDs as well
                    if (options.excludeCredentials) {
                        options.excludeCredentials = options.excludeCredentials.map(cred => ({
                            ...cred,
                            id: base64urlToUint8Array(cred.id)
                        }));
                    }

                    // Call the WebAuthn API
                    const credential = await navigator.credentials.create({ publicKey: options });

                    // Convert binary fields to Base64URL strings for server compatibility
                    return {
                        id: credential.id,
                        rawId: arrayBufferToBase64url(credential.rawId),
                        type: credential.type,
                        response: {
                            attestationObject: arrayBufferToBase64url(credential.response.attestationObject),
                            clientDataJSON: arrayBufferToBase64url(credential.response.clientDataJSON)
                        }
                    };
                } catch (error) {
                    console.error("WebAuthn registration failed:", error);
                    // Don't throw in production
                    // throw error;
                }
            },
            async authenticate(options) {
                try {
                    // Decode challenge using Base64URL
                    options.challenge = base64urlToUint8Array(options.challenge);

                    // Decode allowCredentials IDs using Base64URL
                    if (options.allowCredentials) {
                        options.allowCredentials = options.allowCredentials.map(cred => ({
                            ...cred,
                            id: base64urlToUint8Array(cred.id)
                        }));
                    }

                    // Call the WebAuthn API
                    const assertion = await navigator.credentials.get({ publicKey: options });

                    // Convert binary fields to Base64URL strings for server compatibility
                    return {
                        id: assertion.id,
                        rawId: arrayBufferToBase64url(assertion.rawId),
                        response: {
                            authenticatorData: arrayBufferToBase64url(assertion.response.authenticatorData),
                            clientDataJSON: arrayBufferToBase64url(assertion.response.clientDataJSON),
                            signature: arrayBufferToBase64url(assertion.response.signature),
                            userHandle: assertion.response.userHandle
                                ? arrayBufferToBase64url(assertion.response.userHandle)
                                : null
                        },
                        type: assertion.type
                    };
                } catch (error) {
                    console.error("WebAuthn authentication failed:", error);
                    // Don't throw in production
                    // throw error;
                }
            }
        };

        function base64urlToUint8Array(baseurl) {
            // Replace URL-specific characters
            var padding = '='.repeat((4 - (baseurl.length % 4)) % 4);
            var base64 = baseurl.replace(/-/g, '+').replace(/_/g, '/') + padding;
            var binary = atob(base64);
            var bytes = new Uint8Array(binary.length);
            for (var i = 0; i < binary.length; i++) {
                bytes[i] = binary.charCodeAt(i);
            }
            return bytes;
        }

        // Helper function to convert ArrayBuffer to Base64URL
        function arrayBufferToBase64url(buffer) {
            var binary = '';
            var bytes = new Uint8Array(buffer);
            var len = bytes.byteLength;
            for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
            }
            var base64 = btoa(binary);
            return base64.replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');
        }

    </script>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    

</body>

</html>

<style>
    .material-symbols-outlined {
      font-variation-settings:
      'FILL' 0,
      'wght' 400,
      'GRAD' 0,
      'opsz' 24
    }
</style>