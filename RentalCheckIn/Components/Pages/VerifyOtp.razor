@page "/verify-otp"
@inject JwtService JwtService
@inject TotpService TotpService
@inject NavigationManager NavigationManager

<h3>Verify OTP</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger">@ErrorMessage</div>
}

<EditForm Model="otpModel" OnValidSubmit="HandleVerifyOtp">
    <InputText @bind-Value="otpModel.Code" placeholder="OTP Code" />
    <button type="submit">Verify</button>
</EditForm>

@code {
    private OtpDto otpModel = new();
    private string ErrorMessage;
    [Inject]
    private ProtectedLocalStorage LocalStorage { get; set; }
    [Inject]
    private IHostRepository HostRepository { get; set; }
    [Inject]
    private AuthenticationStateProvider AuthStateProvider { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var result = await LocalStorage.GetAsync<string>("emailForOtp");

        if (result.Success)
        {
            otpModel.Email = result.Value;
        }
        if (string.IsNullOrEmpty(otpModel.Email))
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task HandleVerifyOtp()
    {
        try
        {
            // This should be an api endpoint
            var user = await HostRepository.GetByEmailAsync(otpModel.Email);
            if (user == null)
                throw new Exception("User not found");

            if (!TotpService.VerifyCode(user.TotpSecret, otpModel.Code))
                throw new Exception("Invalid OTP code");

            var token = JwtService.GenerateToken(user);
            Constants.JWTToken = token;
            // Store the token (e.g., in local storage)
            await LocalStorage.SetAsync("token", token);

            await AuthStateProvider.GetAuthenticationStateAsync();

            // Navigate to the home page or dashboard
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            ErrorMessage = ex.Message;
        }
    }
}
