@* @page "/faceid"
@using RentalCheckIn.DTOs.WebAuthn
@using RentalCheckIn.DTOs.WebAuthnDTOs
@inject IJSRuntime JSRuntime
@inject HttpClient Http

<h3>WebAuthn Authentication</h3>

<button @onclick="Register">Register Face ID</button>
<button @onclick="Authenticate">Login with Face ID</button>

<p>@Message</p>

@code {
    private string Message;

    private async Task Register()
    {
        Message = "Starting registration...";

        // Request public key credential creation options from the server
        var options = await Http.GetFromJsonAsync<PublicKeyCredentialCreationOptionsDTO>("api/webauthn/register/options");

        if (options != null)
        {
            // Call JavaScript function to perform WebAuthn registration
            var credential = await JSRuntime.InvokeAsync<object>("WebAuthnInterop.register", options);

            if (credential != null)
            {
                // Send credential to the server for verification and storage
                var response = await Http.PostAsJsonAsync("api/webauthn/register", credential);
                Message = response.IsSuccessStatusCode ? "Registered successfully!" : "Registration failed.";
            }
            else
            {
                Message = "Registration canceled or failed.";
            }
        }
    }

    private async Task Authenticate()
    {
        Message = "Starting authentication...";

        // Request public key credential request options from the server
        var options = await Http.GetFromJsonAsync<PublicKeyCredentialRequestOptionsDTO>("api/webauthn/authenticate/options");

        if (options != null)
        {
            // Call JavaScript function to perform WebAuthn authentication
            var assertion = await JSRuntime.InvokeAsync<object>("WebAuthnInterop.authenticate", options);

            if (assertion != null)
            {
                // Send assertion to the server for verification
                var response = await Http.PostAsJsonAsync("api/webauthn/authenticate", assertion);
                Message = response.IsSuccessStatusCode ? "Authenticated successfully!" : "Authentication failed.";
            }
            else
            {
                Message = "Authentication canceled or failed.";
            }
        }
    }
}
 *@