@page "/reset-password"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Set New Password</h3>

@if (IsPasswordResetSuccessful)
{
    <p>Your password has been successfully reset. <a @onclick="@(() => Navigation.NavigateTo("/login"))">Go to login page</a>.</p>
}
else
{
    <EditForm Model="resetPasswordModel" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="newPassword">New Password</label>
            <InputText @bind-Value="resetPasswordModel.NewPassword" id="newPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText @bind-Value="resetPasswordModel.ConfirmPassword" id="confirmPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(IsLoading)">Save New Password</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }
}

@code {
    [Parameter] public string Token { get; set; } = "hello";
    private PasswordResetDto resetPasswordModel = new PasswordResetDto();
    private string ErrorMessage { get; set; }
    private bool IsPasswordResetSuccessful { get; set; } = false;
    private bool IsLoading { get; set; } = false;
    private ResetPasswordResponse ResetPasswordResponse { get; set; }
    [Inject]
    private IAuthService AuthService { get; set; }

    private async Task HandleResetPassword()
    {

        IsLoading = true;
        // Parse the current URI to extract query parameters
        var uri = Navigation.ToAbsoluteUri(Navigation.Uri);
        var queryParams = QueryHelpers.ParseQuery(uri.Query);

        if (queryParams.TryGetValue("resetToken", out var tokenValues))
        {
            var eVerificationToken = tokenValues.FirstOrDefault();
            if (!string.IsNullOrWhiteSpace(eVerificationToken))
            {
                ResetPasswordResponse = await AuthService.ResetPasswordAsync(eVerificationToken, resetPasswordModel);
            }
        }

        await AuthService.ResetPasswordAsync(Token, resetPasswordModel);

        IsLoading = false;

    }
}