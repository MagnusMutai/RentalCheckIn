@page "/reset-password"
@inject HttpClient Http
@inject NavigationManager Navigation

<h3>Set New Password</h3>

@if (IsPasswordResetSuccessful)
{
    <p>Your password has been successfully reset. <a @onclick="() => Navigation.NavigateTo("/login")">Go to login page</a>.</p>
}
else
{
    <EditForm Model="resetPasswordModel" OnValidSubmit="HandleResetPassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="newPassword">New Password</label>
            <InputText @bind-Value="resetPasswordModel.NewPassword" id="newPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => resetPasswordModel.NewPassword)" />
        </div>

        <div class="form-group">
            <label for="confirmPassword">Confirm New Password</label>
            <InputText @bind-Value="resetPasswordModel.ConfirmPassword" id="confirmPassword" type="password" class="form-control" />
            <ValidationMessage For="@(() => resetPasswordModel.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary" disabled="@(IsLoading)">Save New Password</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(ErrorMessage))
    {
        <p class="text-danger">@ErrorMessage</p>
    }
}

@code {
    [Parameter] public string Token { get; set; }
    private ResetPasswordModel resetPasswordModel = new ResetPasswordModel();
    private string ErrorMessage { get; set; }
    private bool IsPasswordResetSuccessful { get; set; } = false;
    private bool IsLoading { get; set; } = false;

    private async Task HandleResetPassword()
    {
        // Basic validation to ensure passwords match
        if (resetPasswordModel.NewPassword != resetPasswordModel.ConfirmPassword)
        {
            ErrorMessage = "Passwords do not match.";
            return;
        }

        IsLoading = true;

        try
        {
            // Send the new password and token to the backend
            var response = await Http.PostAsJsonAsync("api/account/reset-password", new
            {
                Token,
                NewPassword = resetPasswordModel.NewPassword
            });

            if (response.IsSuccessStatusCode)
            {
                IsPasswordResetSuccessful = true;
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                ErrorMessage = $"Failed to reset password: {errorContent}";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class ResetPasswordModel
    {
        [Required(ErrorMessage = "New Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Confirm Password is required")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; }
    }
}